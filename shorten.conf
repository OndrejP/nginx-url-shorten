# ####################################################################
# Edited by Ondřej Procházka
# based on: https://gist.github.com/MendelGusmao/2356310
# Thanks to Lex Vjatkin and Dušan Hokův
#
# "database scheme"
# database 0: id ~> url
# database 1: id ~> hits
# database 2: id ~> [{referer|user_agent}]
# database 3: id ~> hits (when id is not found)
# database 4: id ~> [{referer|user_agent}] (when id is not found)
# database 5: key "count" storing the number of shortened urls; the id is generated by (this number + 1) converted to base 62
#
# mkdir -p /var/www/shorten.localhost/ngdocs/public/
# touch "short.devel.cz"  >/var/www/shorten.localhost/ngdocs/public/index.html
# 
# Test:
#  # Target: http://devel.cz/user?destination=home 
#  # encode by http://meyerweb.com/eric/tools/dencoder/ to http%3A%2F%2Fdevel.cz%2Fuser%3Fdestination%3Dhome
#
#  export Target="http%3A%2F%2Fdevel.cz%2Fuser%3Fdestination%3Dhome" 
#  wget -O- --post-data "url=${A}" -q "http://shorten.localhost/shorten"
#  wget --max-redirect=0 -O- -q -S $(wget -O- --post-data "url=${A}" -q "http://shorten.localhost/shorten") 2>&1 | grep Location 
#  echo -e "\n  Original: "$A
# 
# ####################################################################

server {
  listen 80;
#  listen [::]:80; # Only if you use IPv6

  server_name shorten.localhost;
  
  root    /var/www/shorten.localhost/ngdocs/public/;

  location /retrieve {
    internal;

    redis2_query get $request_uri;

    redis2_pass 127.0.0.1:6379;
  }

  location /count {
    internal;

    redis2_query select 5;
    redis2_query get count;

    redis2_pass 127.0.0.1:6379;
  }

  location /history {
    internal;

    redis2_query select 1;
    redis2_query incr $request_uri;

    redis2_query select 2;
    redis2_query rpush $request_uri "$http_referer|$http_user_agent";

    redis2_pass 127.0.0.1:6379;
  }

  location  /notfound {
    internal;

    redis2_query select 3;
    redis2_query incr $request_uri;

    redis2_query select 4;
    redis2_query rpush $request_uri "$http_referer|$http_user_agent";

    redis2_pass 127.0.0.1:6379;
  }

  location /store {
    internal;

    redis2_query select 0;
    set_unescape_uri $id $arg_id;
    set_unescape_uri $url $arg_url;
    redis2_query set $id $url;

    redis2_query select 5;
    redis2_query incr count;

    redis2_pass 127.0.0.1:6379;
  }

  location /shorten {

    add_header Content-Type text/plain;

    content_by_lua '
      ngx.req.read_body()
      local args = ngx.req.get_post_args()
      if not args then
          ngx.say("Cant find POST arg url: ", err)
          return
      end

      local parser = require "redis.parser"
      local res = ngx.location.capture("/count")
      local results, type = parser.parse_replies(res.body, 2)

      basen = function(n, b)
        n = math.floor(n)
        if not b or b == 10 then return tostring(n) end
        local digits = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        local t = {}
        local sign = ""
        if n < 0 then
          sign = "-"
          n = -n
        end
        repeat
          local d = (n % b) + 1
          n = math.floor(n / b)
          table.insert(t, 1, digits:sub(d, d))
        until n == 0
        return sign .. table.concat(t,"")
      end

      local id = basen(results[2][1] + 1, 62)

      ngx.location.capture("/store",
        { args = { id = "/"..tostring(id), url = args.url } }
      )

      ngx.say("http://" .. ngx.var.host .. "/" .. id)
    ';
  }

  location = / {
    try_files /index.html /notfound;
  }

  location / {
    content_by_lua '
      local parser = require "redis.parser";
      local res = ngx.location.capture("/retrieve");
      local href, type = parser.parse_reply(res.body);
      if type == parser.ERROR_REPLY or href == nil then
        ngx.location.capture("/notfound");
        ngx.exit(ngx.HTTP_NOT_FOUND);
      else
        ngx.location.capture("/history");
        ngx.redirect(href); 
      end
    ';
  }

}


